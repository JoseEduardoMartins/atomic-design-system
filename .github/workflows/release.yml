name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    # Garantir que apenas um release seja executado por vez
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Verify package.json
        run: |
          echo "üì¶ Verificando package.json..."
          echo "Nome do pacote: $(npm run --silent echo-name)"
          echo "Vers√£o atual: $(npm run --silent echo-version)"
          echo "Arquivos inclu√≠dos: $(npm run --silent echo-files)"

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check test coverage
        run: |
          echo "üìä Verificando cobertura de testes..."

          # Executa testes com cobertura e captura a sa√≠da
          COVERAGE_OUTPUT=$(npm run test:coverage 2>&1)
          echo "$COVERAGE_OUTPUT"

          # Extrai a cobertura geral
          COVERAGE=$(echo "$COVERAGE_OUTPUT" | grep "All files" | awk '{print $4}' | sed 's/%//')
          echo "üìà Overall coverage: $COVERAGE%"

          # Verifica se a cobertura est√° acima do m√≠nimo
          if [ -z "$COVERAGE" ]; then
            echo "‚ùå Could not extract coverage information"
            exit 1
          fi

          if (( $(echo "$COVERAGE < 30" | bc -l) )); then
            echo "‚ùå Coverage is too low: $COVERAGE% (minimum: 30%)"
            exit 1
          fi

          echo "‚úÖ Coverage is acceptable: $COVERAGE%"

      - name: Build project
        run: npm run build

      - name: Verify build artifacts
        run: |
          echo "üì¶ Verificando artifacts de build..."
          ls -la dist/

          # Verificar se os arquivos principais foram criados
          if [ ! -f "dist/atomic-design-system.es.js" ]; then
            echo "‚ùå ES module n√£o encontrado"
            exit 1
          fi

          if [ ! -f "dist/atomic-design-system.cjs.js" ]; then
            echo "‚ùå CommonJS module n√£o encontrado"
            exit 1
          fi

          if [ ! -f "dist/atomic-design-system.css" ]; then
            echo "‚ùå CSS n√£o encontrado"
            exit 1
          fi

          echo "‚úÖ Todos os artifacts de build est√£o presentes"

      - name: Test package locally
        run: |
          echo "üß™ Testando cria√ß√£o do pacote localmente..."
          npm pack

          PACKAGE_FILE=$(ls jose-eduardo-martins-atomic-design-system-*.tgz | head -1)
          echo "üì¶ Pacote criado: $PACKAGE_FILE"

          # Verificar conte√∫do do pacote
          echo "üìã Conte√∫do do pacote:"
          tar -tzf "$PACKAGE_FILE"

          # Limpar arquivo tempor√°rio
          rm "$PACKAGE_FILE"

          echo "‚úÖ Teste de pacote conclu√≠do"

      - name: Verify semantic-release configuration
        run: |
          echo "üîß Verificando configura√ß√£o do semantic-release..."
          cat .releaserc.json

          # Verificar se todos os plugins est√£o instalados
          echo "üì¶ Plugins instalados:"
          npm list @semantic-release/commit-analyzer
          npm list @semantic-release/release-notes-generator
          npm list @semantic-release/changelog
          npm list @semantic-release/npm
          npm list @semantic-release/git
          npm list @semantic-release/github

      - name: Check recent commits
        run: |
          echo "üìù √öltimos commits:"
          git log --oneline -10

          echo "üè∑Ô∏è  Tags existentes:"
          git tag --sort=-version:refname | head -5

      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üöÄ Iniciando semantic-release..."
          echo "üîë GitHub Token: ${GH_TOKEN:0:10}..."
          echo "üîë NPM Token: ${NPM_TOKEN:0:10}..."

          # Executar semantic-release com debug
          DEBUG=semantic-release:* npx semantic-release

      - name: Verify release artifacts
        if: success()
        run: |
          echo "‚úÖ Verificando artifacts do release..."

          # Verificar se o CHANGELOG foi atualizado
          if [ -f "docs/CHANGELOG.md" ]; then
            echo "üìù CHANGELOG.md encontrado"
            echo "√öltimas linhas do CHANGELOG:"
            tail -10 docs/CHANGELOG.md
          else
            echo "‚ö†Ô∏è  CHANGELOG.md n√£o encontrado"
          fi

          # Verificar se a vers√£o foi atualizada
          echo "üì¶ Vers√£o atual: $(npm run --silent echo-version)"

      - name: Show release summary
        if: success()
        run: |
          echo "üéâ Release conclu√≠do com sucesso!"
          echo "üì¶ Package: @jose-eduardo-martins/atomic-design-system"
          echo "üè∑Ô∏è  Vers√£o: $(npm run --silent echo-version)"
          echo "üìù CHANGELOG: docs/CHANGELOG.md"
          echo "üîó NPM: https://www.npmjs.com/package/@jose-eduardo-martins/atomic-design-system"
          echo "üîó GitHub: https://github.com/JoseEduardoMartins/atomic-design-system/releases"

      - name: Handle release failure
        if: failure()
        run: |
          echo "‚ùå Release falhou!"
          echo "üîç Verifique os logs acima para identificar o problema"
          echo "üìã Poss√≠veis causas:"
          echo "   - Tokens de autentica√ß√£o inv√°lidos"
          echo "   - Vers√£o j√° existe no npm"
          echo "   - Commits n√£o seguem Conventional Commits"
          echo "   - Erro de build ou testes"
          echo "üîó Documenta√ß√£o: docs/RELEASE.md"
